#!/usr/bin/perl -I../lib
#
# Assumptions:
#   docker is running -dev w/ the `hosts` command available
#
#   All docker hosts attached are pointing to the same registry, and
#   that the original container was booted from an image there
#
#   You are running this from the directory where blimp exists; need to
#   fix library paths in a better way
#
# To do:
# 
#   address dupe container name possibility, take container ids...
#   does not react well if a host is down
#   set active host back to what it was prior to run ?
#   potential race condition around current active docker host
#   do something with logs to figure out when target is "really" up
#   use api instead of command line output
#
# nice to have:
#   could print out lifetime of container?
#   hostname
#   cgroup stuff
#   tty settings
#   volumes
#
###

$| = 1;

use warnings;
use strict;
use JSON;
use Carp;
require bail;
require capture;
require containers;
require docker;
require hosts;

my $argnum;
my @args;
my $c;
my $name;
my $num_args;
my @options_args;

$num_args = $#ARGV + 1;

foreach $argnum (0 .. $#ARGV) {
  if($ARGV[$argnum] =~ /^-/) {
    push (@options_args, $ARGV[$argnum]);
  } else {
    push (@args, $ARGV[$argnum]);
  }
}

$name = generate_group();

if($num_args < 1) {
  usage();
} else {
  $c = $args[0];
  if($c eq 'help') {
    help();
  } elsif($c eq 'ls') {
    ls();
  } elsif($c eq 'move') {
    if($#args < 2) {
      usage();
    }
    move($args[1], $args[2], $name, \@options_args);
  } elsif($c eq 'replicate') {
    if($#args < 2) {
      usage();
    }
    replicate($name, \@args, \@options_args);
  } elsif($c eq 'start') {
    start();
  } elsif($c eq 'stop') {
    stop();
  } else {
    usage();
  }
}

exit(0);

sub usage {
  my $filename = '../commands.md';
  if (open(my $fh, '<:encoding(UTF-8)', $filename)) {
    while (my $row = <$fh>) {
      chomp $row;
      if ($row eq "Details") {
        exit(1);
      }
      if ($row ne "```") {
        print "$row\n";
      }
    }
  } else {
    warn "Could not open file '$filename' $!";
  }
}

sub help {
  my $filename = '../commands.md';
  if (open(my $fh, '<:encoding(UTF-8)', $filename)) {
    while (my $row = <$fh>) {
      chomp $row;
      if ($row ne "```") {
        print "$row\n";
      }
    }
    exit(0);
  } else {
    warn "Could not open file '$filename' $!";
  }
}

sub ls {

  my $out;
  my $realtime;

  $realtime = 1;

  # get containers
  containers::enumerate($realtime);

  return();

}

sub move {

  my $clist;
  my $container;
  my $found1;
  my $found2;
  my $hlistref;
  my @hlist;
  my $i;
  my $j;
  my @lines;
  my $name;
  my @options;
  my $optionsref;
  my $params;
  my @parts;
  my $sourcehost;
  my $targethost;

  $container  = shift || '';
  $targethost = shift || '';
  $name       = shift || '';
  $optionsref = shift || '';
  @options    = @{$optionsref};

  $found1 = 0;
  $found2 = 0;
  if($container && $container !~ /^\s*$/ && $targethost && $targethost !~ /^\s*$/) {
    print "planning to move $container to $targethost...\n";
    $clist = containers::enumerate();
    @lines = split(/\n/, $clist);
    for($i = 0; $i <= $#lines; $i++) {
      @parts = split(/\s+/, $lines[$i]); # XXX only works for some cols - move to api
      if($parts[$#parts] eq $container) {
        if(1 == $found1) {
          bail::bye("Sorry, a container by this name exists on more than one host.");
          # XXX let user supply ids as well...
        }
        $sourcehost = $parts[0];
        #print "found container on current host $sourcehost\n";
        $found1 = 1;
        if($parts[0] eq $targethost) {
          bail::bye("Sorry, you can't move a container to the host it is already on.");
        }
      }
    }
    $hlistref = hosts::enumerate();
    @hlist = @{$hlistref};
    for($i = 0; $i <= $#hlist; $i++) {
      if($hlist[$i] eq $targethost) {
        $found2 = 1;
      }
    }

    if(0 == $found1) {
      bail::bye("Sorry, could not find a container by that name.");
    } elsif(0 == $found2) {
      bail::bye("Sorry, could not find a target host by that name.");
    } else {
      print "everything checks out, moving $container from $sourcehost to $targethost...\n";
      $params = capture::running($container, $sourcehost, $name, \@options);
      print "starting new container on $targethost...\n";
      docker::drun("hosts active $targethost");
      docker::drun("$params");
      # XXX obvious status checks and actual health/readiness determination needed here!
      print "stopping old container on $sourcehost...\n";
      docker::drun("hosts active $sourcehost");
      docker::drun("stop $container");
    }

  } else {
    bail::bye("Sorry, something was wrong with those parameters.");
  }

  return();

}

sub replicate {

  my @args;
  my $argsref;
  my $c;
  my $clist;
  my $container;
  my $found1;
  my $found2;
  my $hlistref;
  my @hlist;
  my @hosts;
  my $i;
  my $j;
  my @lines;
  my $name;
  my $number;
  my @options;
  my $optionsref;
  my $params;
  my @parts;
  my $sourcehost;
  my $targethost;
  my $targethost_number;
  my $targethost_numbers;
  my @target_parts;

  $name       = shift || '';
  $argsref    = shift || '';
  $optionsref = shift || '';
  @args       = @{$argsref};
  @options    = @{$optionsref};
  $c          = $args[0];
  $container  = $args[1];

  if($args[$#args] =~ /^-?\d+$/) {
    @hosts = @args[2..$#args-1];
    $number = $args[$#args];
  } else {
    @hosts = @args[2..$#args];
    $number = 0;
  }

  $targethost_numbers = 0;
  for my $i (0 .. $#hosts) {
    @target_parts = split(/:/, $hosts[$i]);
    $targethost = $target_parts[0] || usage();
    $targethost_number = $target_parts[1] || usage();
    $targethost_numbers += $targethost_number;

    $found1 = 0;
    $found2 = 0;
    if($container && $container !~ /^\s*$/ && $targethost && $targethost !~ /^\s*$/) {
      print "planning to replicate $container to $targethost $targethost_number times...\n";
      $clist = containers::enumerate();
      @lines = split(/\n/, $clist);
      for($i = 0; $i <= $#lines; $i++) {
        @parts = split(/\s+/, $lines[$i]); # XXX only works for some cols - move to api
        if($parts[$#parts] eq $container) {
          if(1 == $found1) {
            bail::bye("Sorry, a container by this name exists on more than one host.");
            # XXX let user supply ids as well...
          }
          $sourcehost = $parts[0];
          #print "found container on current host $sourcehost\n";
          $found1 = 1;
        }
      }
      $hlistref = hosts::enumerate();
      @hlist = @{$hlistref};
      for($i = 0; $i <= $#hlist; $i++) {
        if($hlist[$i] eq $targethost) {
          $found2 = 1;
        }
      }

      if(0 == $found1) {
        bail::bye("Sorry, could not find a container by that name.");
      } elsif(0 == $found2) {
        bail::bye("Sorry, could not find a target host by that name.");
      } else {
        print "everything checks out, replicating $container from $sourcehost to $targethost $targethost_number times...\n";
        for ($j=0;$j<$targethost_number;$j++) {
          $params = capture::running($container, $sourcehost, $name, \@options);
          print "starting new container on $targethost...\n";
          docker::drun("hosts active $targethost");
          docker::drun("$params");
        }
      }
    }else {
      bail::bye("Sorry, something was wrong with those parameters.");
    }
  }

  if($container && $container !~ /^\s*$/ && $number-$targethost_numbers > 0) {
    replicate_number($container, $name, $number-$targethost_numbers, \@options);
  } else {
    bail::bye("Sorry, something was wrong with those parameters.");
  }

  return();

}

sub replicate_number {

  my $clist;
  my $container;
  my $count;
  my $found1;
  my @hlist;
  my $hlistref;
  my $i;
  my $j;
  my @lines;
  my $name;
  my $number;
  my @options;
  my $optionsref;
  my $params;
  my @parts;
  my $sourcehost;
  
  $container  = shift || '';
  $name       = shift || '';
  $number     = shift || '';
  $optionsref = shift || '';
  @options    = @{$optionsref};

  $found1 = 0;
  print "planning to replicate $container to connected hosts $number times...\n";
  $clist = containers::enumerate();
  @lines = split(/\n/, $clist);
  for($i = 0; $i <= $#lines; $i++) {
    @parts = split(/\s+/, $lines[$i]); # XXX only works for some cols - move to api
    if($parts[$#parts] eq $container) {
      if(1 == $found1) {
        bail::bye("Sorry, a container by this name exists on more than one host.");
        # XXX let user supply ids as well...
      }
      $sourcehost = $parts[0];
      #print "found container on current host $sourcehost\n";
      $found1 = 1;
    }
  }
  $hlistref = hosts::enumerate();
  @hlist = @{$hlistref};

  if(0 == $found1) {
    bail::bye("Sorry, could not find a container by that name.");
  } else {
    print "everything checks out, replicating $container from $sourcehost to connected hosts $number times...\n";
    for ($j=0;$j<$number;$j++) {
      $count = $j%($#hlist+1);
      $params = capture::running($container, $sourcehost, $name, \@options);
      print "starting new container on $hlist[$count]...\n";
      docker::drun("hosts active $hlist[$count]");
      docker::drun("$params");
    }
  }

  return ();

}

sub start {

  print "TODO\n";
  return();

}

sub stop {

  print "TODO\n";
  return();

}

sub generate_group {

  # generated container group name

  my @charset;
  my $name;

  @charset = ('A'..'Z', 'a'..'z');
  $name = join '', @charset[map {int rand @charset} (1..8)];

  return($name);

}

sub getgroupbycontainer {

  # XXX

  my $container;

  return($name);

}
