#!/usr/bin/perl -I../lib
#
# Assumptions:
#   docker is running -dev w/ the `hosts` command available
#
#   All docker hosts attached are pointing to the same registry, and
#   that the original container was booted from an image there
#
#   You are running this from the directory where blimp exists; need to
#   fix library paths in a better way
#
# To do:
# 
#   address dupe container name possibility, take container ids...
#   does not react well if a host is down
#   set active host back to what it was prior to run ?
#   potential race condition around current active docker host
#   do something with logs to figure out when target is "really" up
#
# nice:
# could print out lifetime of container?
# hostname
# cgroup stuff
# tty
# volumes
#
###

# container
#docker inspect $CONTAINERNAME > $FILE
#
# get image id
#export IMAGEID=`jq '.[] | .Image' $FILE | sed -e 's/"//g'`
#echo "found image id: $IMAGEID"
#
#| jq -
#
# Config Cmd []
# | jq '.[] | .Config | .Cmd | .[]' -
#    "redis-server"
#
# args
# entrypoint ?
# env ?
# user ?
# working dir?
#
#
# image
#export IMAGENAME=`docker images --no-trunc=true | grep $IMAGEID | head -1 | awk '{print $1}'`
#echo "found image name: $IMAGENAME"

use warnings;
use strict;
use JSON;
use Carp;
use Regexp::Common;
require bail;
require capture;
require containers;
require docker;
require hosts;

my $c;
my $num_args;

$num_args = $#ARGV + 1;

if($num_args < 0) {
  usage();
  exit(1);
} else {
  $c = $ARGV[0];
  if($c eq 'ls') {
    ls();
  } elsif($c eq 'move') {
    move($ARGV[1], $ARGV[2]);
  } elsif($c eq 'replicate') {
    my $arg1;
    my $arg2;
    my $arg3;
    my $arg4;

    # XXX ignoring options and container group for now
    if($num_args > 2) {
      $arg4 = $ARGV[$num_args-1];
      $arg3 = $ARGV[$num_args-2];
      $arg2 = $ARGV[$num_args-3];
    } else {
      usage();
      exit(1);
    }
    if($num_args > 3) {
      $arg1 = $ARGV[$num_args-4];
    }
    replicate($arg1, $arg2, $arg3, $arg4);
  } elsif($c eq 'start') {
    start();
  } elsif($c eq 'stop') {
    stop();
  } else {
    usage();
    exit(1);
  }
}

exit(0);

sub usage {
  my $filename = '../commands.md';
  if (open(my $fh, '<:encoding(UTF-8)', $filename)) {
    while (my $row = <$fh>) {
      chomp $row;
      if ($row ne "```") {
        print "$row\n";
      }
    }
  } else {
    warn "Could not open file '$filename' $!";
  }
}

sub ls {

  my $out;

  # get containers
  $out = containers::enumerate();
  print "$out\n";

  return();

}

sub move {

  my $clist;
  my $container;
  my $found1;
  my $found2;
  my $i;
  my $j;
  my @lines;
  my $params;
  my @parts;
  my $sourcehost;
  my $targethost;

  $container  = shift || '';
  $targethost = shift || '';

  $found1 = 0;
  if($container && $container !~ /^\s*$/ && $targethost && $targethost !~ /^\s*$/) {
    print "planning to move $container to $targethost...\n";
    $clist = containers::enumerate();
    @lines = split(/\n/, $clist);
    for($i = 0; $i <= $#lines; $i++) {
      @parts = split(/\s+/, $lines[$i]); # XXX only works for some cols - move to api
      if($parts[$#parts] eq $container) {
        if(1 == $found1) {
          bail::bye("Sorry, a container by this name exists on more than one host.");
          # XXX let user supply ids as well...
        }
        $sourcehost = $parts[0];
        #print "found container on current host $sourcehost\n";
        $found1 = 1;
        if($parts[0] eq $targethost) {
          bail::bye("Sorry, you can't move a container to the host it is already on.");
        }
      }
      if($parts[0] eq $targethost) {
        $found2 = 1;
      }
    }

    if(0 == $found1) {
      bail::bye("Sorry, could not find a container by that name.");
    } elsif(0 == $found2) {
      bail::bye("Sorry, could not find a target host by that name.");
    } else {
      print "everything checks out, moving $container from $sourcehost to $targethost...\n";
      $params = capture::running($container, $sourcehost);
      print "starting new container on $targethost...\n";
      docker::drun("hosts active $targethost");
      docker::drun("$params");
      # XXX obvious status checks and actual health/rediness determination needed here!
      print "stopping old container on $sourcehost...\n";
      docker::drun("hosts active $sourcehost");
      docker::drun("stop $container");
    }

  } else {
    bail::bye("Sorry, something was wrong with those parameters.");
  }

  return();

}

sub replicate {

  my $c;
  my $clist;
  my $container;
  my $found1;
  my $found2;
  my $i;
  my $j;
  my $k;
  my @lines;
  my $number;
  my $params;
  my @parts;
  my $sourcehost;
  my $targethost;
  my $targethost_number;
  my @target_parts;

  $c          = shift || '';
  $container  = shift || '';
  # XXX must be reworked to allow support for more than one target host specified
  $targethost = shift || '';
  $number     = shift || '';
  
  if($c eq '') {
    if($RE{num}{int}->matches($number)) {
        $c = $container;
        $container = $targethost;
        $targethost = '';
    } else {
        $c = $container;
        $container = $targethost;
        # XXX needs error checking and validation of user input
        @target_parts = split(/:/, $number);
        $targethost = $target_parts[0];
        $targethost_number = $target_parts[1];
        $number = '';
    }
  }

  if($number eq '') {
    $number = $targethost_number;
  }
  $found1 = 0;
  if($container && $container !~ /^\s*$/ && $targethost && $targethost !~ /^\s*$/) {
    print "planning to replicate $container to $targethost $number times...\n";
    $clist = containers::enumerate();
    @lines = split(/\n/, $clist);
    for($i = 0; $i <= $#lines; $i++) {
      @parts = split(/\s+/, $lines[$i]); # XXX only works for some cols - move to api
      if($parts[$#parts] eq $container) {
        if(1 == $found1) {
          bail::bye("Sorry, a container by this name exists on more than one host.");
          # XXX let user supply ids as well...
        }
        $sourcehost = $parts[0];
        #print "found container on current host $sourcehost\n";
        $found1 = 1;
      }
      if($parts[0] eq $targethost) {
        $found2 = 1;
      }
    }

    if(0 == $found1) {
      bail::bye("Sorry, could not find a container by that name.");
    } elsif(0 == $found2) {
      bail::bye("Sorry, could not find a target host by that name.");
    } else {
      print "everything checks out, replicating $container from $sourcehost to $targethost $number times...\n";
      for ($k=0;$k<$number;$k++) {
        $params = capture::running($container, $sourcehost);
        print "starting new container on $targethost...\n";
        docker::drun("hosts active $targethost");
        docker::drun("$params");
      }
    }
  } else {
    # XXX currently options like host:number or just number fail still
    bail::bye("Sorry, something was wrong with those parameters.");
  }

  return();

}

sub start {

  print "TODO\n";
  return();

}

sub stop {

  print "TODO\n";
  return();

}
